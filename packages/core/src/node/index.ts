import { f, n, node, u } from './node'
import type { X } from './types'
export * from './const'
export * from './node'
export * from './types'
export const iResolution = u('iResolution', [1280, 800])
export const iMouse = u('iMouse', [0, 0])
export const iTime = u('iTime', 0)
export const fragCoord = node('variable', { id: 'fragCoord' })

// Type constructors
export const float = (x: X) => n('float', x)
export const int = (x: X) => n('int', x)
export const uint = (x: X) => n('uint', x)
export const bool = (x: X) => n('bool', x)
export const vec2 = (x?: X, y?: X) => n('vec2', x, y)
export const vec3 = (x?: X, y?: X, z?: X) => n('vec3', x, y, z)
export const vec4 = (x?: X, y?: X, z?: X, w?: X) => n('vec4', x, y, z, w)
export const mat2 = (...args: X[]) => n('mat2', ...args)
export const mat3 = (...args: X[]) => n('mat3', ...args)
export const mat4 = (...args: X[]) => n('mat4', ...args)
export const ivec2 = (x?: X, y?: X) => n('ivec2', x, y)
export const ivec3 = (x?: X, y?: X, z?: X) => n('ivec3', x, y, z)
export const ivec4 = (x?: X, y?: X, z?: X, w?: X) => n('ivec4', x, y, z, w)
export const uvec2 = (x?: X, y?: X) => n('uvec2', x, y)
export const uvec3 = (x?: X, y?: X, z?: X) => n('uvec3', x, y, z)
export const uvec4 = (x?: X, y?: X, z?: X, w?: X) => n('uvec4', x, y, z, w)
export const bvec2 = (x?: X, y?: X) => n('bvec2', x, y)
export const bvec3 = (x?: X, y?: X, z?: X) => n('bvec3', x, y, z)
export const bvec4 = (x?: X, y?: X, z?: X, w?: X) => n('bvec4', x, y, z, w)

// Math Functions
export const abs = (x: X) => f('abs', x)
export const acos = (x: X) => f('acos', x)
export const asin = (x: X) => f('asin', x)
export const atan = (x: X) => f('atan', x)
export const atan2 = (y: X, x: X) => f('atan2', y, x)
export const ceil = (x: X) => f('ceil', x)
export const clamp = (x: X, min: X, max: X) => f('clamp', x, min, max)
export const cos = (x: X) => f('cos', x)
export const cross = (a: X, b: X) => f('cross', a, b)
export const degrees = (x: X) => f('degrees', x)
export const distance = (a: X, b: X) => f('distance', a, b)
export const dot = (a: X, b: X) => f('dot', a, b)
export const exp = (x: X) => f('exp', x)
export const exp2 = (x: X) => f('exp2', x)
export const faceforward = (n: X, i: X, nref: X) => f('faceforward', n, i, nref)
export const floor = (x: X) => f('floor', x)
export const fract = (x: X) => f('fract', x)
export const length = (x: X) => f('length', x)
export const all = (x: X) => f('all', x)
export const any = (x: X) => f('any', x)
export const bitcast = (x: X) => f('bitcast', x)
export const cbrt = (x: X) => f('cbrt', x)
export const dFdx = (x: X) => f('dFdx', x)
export const dFdy = (x: X) => f('dFdy', x)
export const difference = (a: X, b: X) => f('difference', a, b)
export const equals = (a: X, b: X) => f('equals', a, b)
export const fwidth = (x: X) => f('fwidth', x)
export const inverseSqrt = (x: X) => f('inverseSqrt', x)
export const lengthSq = (x: X) => f('lengthSq', x)
export const log = (x: X) => f('log', x)
export const log2 = (x: X) => f('log2', x)
export const max = (a: X, b: X) => f('max', a, b)
export const min = (a: X, b: X) => f('min', a, b)
export const mix = (a: X, b: X, t: X) => f('mix', a, b, t)
export const negate = (x: X) => f('negate', x)
export const normalize = (x: X) => f('normalize', x)
export const oneMinus = (x: X) => f('oneMinus', x)
export const pow = (x: X, y: X) => f('pow', x, y)
export const pow2 = (x: X) => f('pow2', x)
export const pow3 = (x: X) => f('pow3', x)
export const pow4 = (x: X) => f('pow4', x)
export const radians = (x: X) => f('radians', x)
export const reciprocal = (x: X) => f('reciprocal', x)
export const reflect = (i: X, n: X) => f('reflect', i, n)
export const refract = (i: X, n: X, eta: X) => f('refract', i, n, eta)
export const round = (x: X) => f('round', x)
export const saturate = (x: X) => f('saturate', x)
export const sign = (x: X) => f('sign', x)
export const sin = (x: X) => f('sin', x)
export const smoothstep = (edge0: X, edge1: X, x: X) => f('smoothstep', edge0, edge1, x)
export const sqrt = (x: X) => f('sqrt', x)
export const step = (edge: X, x: X) => f('step', edge, x)
export const tan = (x: X) => f('tan', x)
export const transformDirection = (x: X, matrix: X) => f('transformDirection', x, matrix)
export const trunc = (x: X) => f('trunc', x)
